Ques:1
Find Immediate Smaller Than X
Given an array arr[] of size N containing positive integers and an integer X. 
You need to find the value in the array which is smaller than X and closest to it.
Sample Input:
2
5
4 67 13 12 15
16
5
1 2 3 4 5
1

Sample Output:
15
-1

Solution:
// User function to complete
// arr[]: input array
// n: size of array
// k: find element smaller and closest to it. 
int immediateSmaller(int arr[], int n, int x)
{
    // your code here
    int min=INT_MAX;
    int flag=0;
    int diff;
    int min_element;
    for(int i=0;i<n;i++)
    {
        if(arr[i]<x)
        {
            diff=x-arr[i];
            if(diff<min)
            {
                min=diff;
                min_element=arr[i];
                flag=1;
            }
        }
    }
    if(flag==0)
        return -1;
    else
        return min_element;
}


Ques:2
Subarray with given sum
Given an unsorted array A of size N of non-negative integers, find a continuous sub-array which adds to a given number S.

Example 1:

Input:
N = 5, S = 12
A[] = {1,2,3,7,5}
Output: 2 4
Explanation: The sum of elements 
from 2nd position to 4th position 
is 12.

Solution:

// Function to find the subarray with given sum k
// arr: input array
// n: size of array
vector<int> subarraySum(int arr[], int n, int s){
    
    // Your code here
    vector<int> v;
    int start=0;
    int last=0;
    int sum=0;
    int flag=0;
    for(int i=0;i<n;i++)
    {
        sum+=arr[i];
        if(sum>=s)
        {
            last=i;
            while(s<sum && start<last)
            {
                sum=sum-arr[start];
                start=start+1;
            }
            
            if(sum==s)
            {
                v.push_back(start+1);
                v.push_back(last+1);
                flag=1;
                break;
            }
        }
    }
    if(flag==0)
        v.push_back(-1);
    return v;
    
}

Ques:3
Kadane's Algorithm
Given an array arr of N integers. Find the contiguous sub-array with maximum sum.

Example 1:

Input:
N = 5
arr[] = {1,2,3,-2,5}
Output: 9
Explanation: Max subarray sum is 9
of elements (1, 2, 3, -2, 5) which 
is a contiguous subarray.

Solution:
// Function to find subarray with maximum sum
// arr: input array
// n: size of array
int maxSubarraySum(int arr[], int n){
    
    int max_till_here=arr[0];
    int max_global=arr[0];
    for(int i=1;i<n;i++)
    {
        max_till_here=max(arr[i],arr[i]+max_till_here);
        if(max_till_here>max_global)
            max_global=max_till_here;
    }
    return max_global;
    
    // Your code here
    
}

Ques:4
Rearrange an array with O(1) extra space
Given an array arr[] of size N where every element is in the range from 0 to n-1. Rearrange the given array so that arr[i] becomes arr[arr[i]].

Example 1:

Input:
N = 2
arr[] = {1,0}
Output: 0 1
Explanation: arr[0] = 1 and arr[arr[0]]
= 0.Also, arr[1] = 0 and arr[arr[1]] = 1.
So, rearranging elements, we get array 
as, 0 1.

Solution:
// Function to rarrange the elements in O(1) extra space
// arr: input array
// n: size of array
void arrange(long long arr[], int n) {
    // Your code here
    
    
    for(int i=0;i<n;i++)
    {
        arr[i]=arr[i]+(arr[arr[i]]%n)*n;
    }
    
    for(int i=0;i<n;i++)
    {
        arr[i]=arr[i]/n;
    }
    
}

Question:5
Trapping Rain Water
Given an array arr[] of N non-negative integers representing the height of blocks at index i as Ai where the width of each block is 1.
Compute how much water can be trapped in between blocks after raining.


Input:
N = 4
arr[] = {7,4,0,9}
Output: 10
Explanation: Water trapped by the 
block of height 4 is 3 units, block 
of height 0 is 7 units. So, the 
total unit of water trapped is 
10 units.

Solution:

// function to find the trapped water in between buildings
// arr: input array
// n: size of array
int trappingWater(int arr[], int n){

    // Your code here
    int max_left[n];
    int max_right[n];
    max_left[0]=arr[0];
    int total=0;
    for(int i=1;i<n;i++)
    {
        max_left[i]=max(arr[i],max_left[i-1]);
    }
    
    max_right[n-1]=arr[n-1];
    for(int i=n-2;i>=0;i--)
    {
        max_right[i]=max(arr[i],max_right[i+1]);
    }
    
    for(int i=0;i<n;i++)
    {
        total+=max(0,min(max_left[i],max_right[i])-arr[i]);
    }
    
    return total;    
}

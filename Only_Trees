1)Level order
void levelutil(Node* node,vector<int>&v)
{
    if(node==NULL)
  {
      return ;
  }
  queue<Node*> q;
  q.push(node);
  while(!q.empty())
  {
      Node* temp=q.front();
      v.push_back(temp->data);
      if(temp->left)
      {
          q.push(temp->left);
      }
      if(temp->right)
      {
          q.push(temp->right);
      }
  }  
}
vector<int> levelOrder(Node* node)
{
  //Your code here
  vector<int>v1;
  levelutil(node,v1);
  return v1;
  
}


2) Reverse level order traversal:
void reverseutil(Node*root,vector<int>&v)
{
    if(root==NULL)
    {
        return;
    }
    queue<Node*> q;
    stack<int>s;
    q.push(root);
    while(!q.empty())
    {
        Node* temp=q.front();
        s.push(temp->data);
        q.pop();
        
        if(temp->right!=NULL)
        {
            q.push(temp->right);
        }
        if(temp->left!=NULL)
        {
            q.push(temp->left);
        }
        
    }
    
    while(!s.empty())
    {
        v.push_back(s.top());  #storing into the vector
        s.pop();
    }
}


vector<int> reverseLevelOrder(Node *root)
{
    // code here
    vector<int>v1;
    reverseutil(root,v1);
    return v1;
}


3)HEIGHT OF A TREE:
int height(struct Node* node){
        // code here
        if(node==NULL)
        {
            return 0;
        }
        return 1+max(height(node->left),height(node->right));
    }



4)DIAMETER OF A TREE:


int height(Node* root)
{
    if(root==NULL)               #HEIGHT FUNCTION
    {
        return 0;
    }
    
    return 1+max(height(root->left),height(root->right));
}


int diameter(Node* node) {
    if(node==NULL)
    {
        return 0;
    }
    int lh=height(node->left);
    int rh=height(node->right);
    
    int ld=diameter(node->left);
    int rd=diameter(node->right);
    
    return max(lh+rh+1,max(ld,rd)); 
}


5)MIRROR OF A TREE:
TreeNode* invertTree(TreeNode* root) {
        
        if(root==NULL)
        {
            return NULL;
        }
        
        TreeNode* temp=root->right;
        root->right=root->left;
        root->left=temp;
        
        invertTree(root->left);
        invertTree(root->right);  
        return root;
        
    }
    
    
    
6)LEFT VIEW OF A TREE:

void lefttviewutil(Node* root,vector<int>&v1)
{
    if(root==NULL)
    {
        return;
    }
    int isfirst=1;
    queue<Node*> q;
    q.push(root);
    q.push(NULL);
    while(!q.empty())
    {
        Node* temp=q.front();
        q.pop();
        if(!temp)
        {
            if(q.size()==0)
            {
                return;
            }
            q.push(NULL);
            isfirst=1;
        }
        else
        {
            if(isfirst)
            {
                v1.push_back(temp->data);
                isfirst=0;
            }
            
            if(temp->left)
            {
                q.push(temp->left);
            }
            if(temp->right)
            {
                q.push(temp->right);
            }
            
        }
    }
}


// Should return  right view of tree
vector<int> leftView(Node *root)
{
   // Your Code here
   vector <int> v;
   leftviewutil(root,v);
   return v;
}





7)RIGHT VIEW OF A TREE:
void rightviewutil(Node* root,vector<int>&v1)
{
    if(root==NULL)
    {
        return;
    }
    int isfirst=1;
    queue<Node*> q;
    q.push(root);
    q.push(NULL);
    while(!q.empty())
    {
        Node* temp=q.front();
        q.pop();
        if(!temp)
        {
            if(q.size()==0)
            {
                return;
            }
            q.push(NULL);
            isfirst=1;
        }
        else
        {
            if(isfirst)
            {
                v1.push_back(temp->data);
                isfirst=0;
            }
            if(temp->right)
            {
                q.push(temp->right);
            }
            if(temp->left)
            {
                q.push(temp->left);
            }
            
        }
    }
}


// Should return  right view of tree
vector<int> rightView(Node *root)
{
   // Your Code here
   vector <int> v;
   rightviewutil(root,v);
   return v;
}


8)CHECK FOR BALANCED TREE:

int height(Node* root)
{
    if(root==NULL)
    {
        return 0;
    }
    
    return 1+max(height(root->left),height(root->right));
}


bool isBalanced(Node *root)
{
    //  Your Code here
    if(root==NULL)
    {
        return true;
    }
    
    int lh=height(root->left);
    int rh=height(root->right);
    if(abs(lh-rh)<=1 &&isBalanced(root->left)&&isBalanced(root->right))
    {
        return 1;
    }
    return 0;
}

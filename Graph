https://leetcode.com/problems/find-the-town-judge/submissions/
Solution:
class Solution {
public:
    int findJudge(int N, vector<vector<int>>& trust) {
        
        vector<int> count(N+1,0);  #make a count array to store indegree-outdegree
        for(auto t :trust)
        {
            count[t[0]]--;
            count[t[1]]++;
            
        }
        
        for(int i=1;i<N+1;i++)
        {
            if(count[i]==N-1)       #to see the index which is town judge
            {
                return i;
            }
        }
        
        
        return -1;
        
    }
};

BUILD A GRAPH/BFS/DFS:
#include<bits/stdc++.h> 
using namespace std;

void addedge(vector<int>g[],int u ,int v)
{
    g[u].push_back(v);
    g[v].push_back(u);
    
}


void printedge(vector<int>g[],int V)
{
    for(int v=0;v<V;v++)
    {
        cout<<v<<"->";
        for(auto x:g[v])
        {
            cout<<x<<",";
        }
        cout<<endl;
    }
    
}


void bfs(vector<int>g[],int V,int src)
{
    queue<int> q;
    vector<int>v;
    bool visited[V];
    for(int i=0;i<V;i++)
    {
        visited[i]=false;
    }
    q.push(src);
    visited[src]=true;
    while(!q.empty())
    {
        int temp=q.front();
        q.pop();
        v.push_back(temp);
        for(auto x:g[temp])
        {
            if(!visited[x])
            {
                q.push(x);
                visited[x]=true;
            }
        }
    }
    
    for(int i=0;i<v.size();i++)
    {
        cout<<v[i]<<endl;
    }
}



void dfs(vector<int>g[],int V,int src,vector<int>&v1,bool vis[])
{
    v1.push_back(src);
    vis[src]=true;
    
    for(auto x:g[src])
    {
        if(!vis[x])
        {
            dfs(g,V,x,v1,vis);
        }
    }  
    
}


int main()
{
    int V=5;
    vector<int>v1;
    bool vis[V];
    vector<int> g[V];
    addedge(g,0,1);
    addedge(g,0,4);
    addedge(g,1,2);
    addedge(g,1,3);
    addedge(g,1,4);
    addedge(g,2,3);
    addedge(g,3,4);
    printedge(g,V);
    bfs(g,V,0);
    for(int i=0;i<V;i++)
    {
        vis[i]=false;
    }
    dfs(g,V,0,v1,vis);
    for(int i=0;i<v1.size();i++)
    {
        cout<<v1[i]<<endl;
    }

    return 0;
}




### DETECT CYCCLE IN A UNDIRECTED GRAPH:  https://practice.geeksforgeeks.org/problems/detect-cycle-in-an-undirected-graph/1#

bool dfs_utility(vector<int>g[],int V,bool vis[],int start,int parent)
{
    vis[start]=true;
    for(auto node:g[start])
    {
        if(!vis[node])
        {
            if(dfs_utility(g,V,vis,node,start))
            {
                return true;
            }
        }
        else if(node!=parent)
        {
            return true;
            
        }
    }
    return false;
    
}


bool isCyclic(vector<int> g[], int V)
{
    bool vis[V];
    bool t;
    for(int i=0;i<V;i++)
    {
        vis[i]=false;
    }
    
    for(int i=0;i<V;i++)
    {
        if(!vis[i])
        {
           if(dfs_utility(g,V,vis,i,-1))
           {
               return true;
           }
           
        }
    }
    return false;
   
}

1)ARRAYS:
1)finding maximum and minimum element in array by minimum comparisons.
#include <iostream>

using namespace std;

int main()
{
    int n,i;
    cin>>n;
    int a[10];
    int min,max;
    for(int i=0;i<n;i++)
    {
        cin>>a[i];
    }
    if(n%2==0)
    {
        if(a[0]>a[1])
        {
            max=a[0];
            min=a[1];
        }
        else
        {
            max=a[1];
            min=a[0];
            
        }
        i=1;
    }
    else
    {
        max=a[0];
        min=a[0];
        i=2;
    }
    
    
    while(i<n-1)
    {
        if(a[i]>a[i+1])
        {
            if(a[i]>max)
            {
                max=a[i];
            }
            if(a[i+1]<min)
            {
                min=a[i+1];
            }
            
        }
        else
        {
            if(a[i+1]>max)
            {
                max=a[i+1];
            }
            if(a[i]<min)
            {
                min=a[i];
            }
            
        }
        i=i+2;
    }
        
        cout<<"max is"<<max;
        cout<<"min is"<<min;

    return 0;
}



2)Sort colors:leetcode https://leetcode.com/problems/sort-colors/

class Solution {
public:
    void sortColors(vector<int>& nums) {
        
        int low=0;
        int mid=0;
        int high=nums.size()-1;
        int t;
        
        while(mid<=high)
        {
            if(nums[mid]==0)
            {
                t=nums[low];
                nums[low]=nums[mid];
                nums[mid]=t;
                low++;
                mid++;
                
            }
            else if(nums[mid]==1)
            {
                mid++;
                
            }
            else
            {
                t=nums[mid];
                nums[mid]=nums[high];
                nums[high]=t;
                high--;
                
            }
        }
        
        
    }
};




3)KADANE ALGO
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        
        int sum=0;
        int maxi=nums[0];
        for(int i=0;i<nums.size();i++)
        { 
            if(sum<0)
            {
                sum=0;
            }
            sum+=nums[i];
            maxi=max(maxi,sum);
        }
        return maxi;
        
    }
};



4)Move all negative elements to one side of the array:

#include <iostream>
using namespace std;

int main()
{
    int n,i;
    int a[20];
    cin>>n;
    for(int i=0;i<n;i++)
    {
        cin>>a[i];
    }
    int start=0,end=n-1;
    while(start<end)
    {
        cout<<"start is"<<start<<" "<<"end is"<<end<<endl;
        if(a[start]<0)
        {
            while(a[end]<0)
            {
                end--;
            }
            swap(a[start],a[end]);
            end--;
        }
        start++;
        
    }
    cout<<"AFTER transferring"<<endl;
    for(int i=0;i<n;i++)
    {
        cout<<a[i]<<" ";
    }

    return 0;
}
#include <iostream>
using namespace std;

int main()
{
    int n,i;
    int a[20];
    cin>>n;
    for(int i=0;i<n;i++)
    {
        cin>>a[i];
    }
    int start=0,end=n-1;
    while(start<end)
    {
        cout<<"start is"<<start<<" "<<"end is"<<end<<endl;
        if(a[start]<0)
        {
            while(a[end]<0)
            {
                end--;
            }
            swap(a[start],a[end]);
            end--;
        }
        start++;
        
    }
    cout<<"AFTER transferring"<<endl;
    for(int i=0;i<n;i++)
    {
        cout<<a[i]<<" ";
    }

    return 0;
}

output:
11                                                                                                                                            
0 7 -3 -4 -6 3 8 2 -4 -2 11                                                                                                                   
start is0 end is10                                                                                                                            
start is1 end is10                                                                                                                            
start is2 end is10                                                                                                                            
start is3 end is9                                                                                                                             
start is4 end is6   
AFTER transferring                                                                                                                            
0 7 11 2 8 3 -6 -4 -4 -2 -3   

5)cyclically rotate array by one
void rotate(int arr[], int n)
{
    int t=arr[n-1];
    for(int i=n-1;i>0;i--)
    {
        arr[i]=arr[i-1];
    }
    arr[0]=t;
    
}



5)Stocks buy and sell-1
leetcode-121
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        
        int maxprofit=0;
        int minsofar=prices[0];
        int profit=0;
        
        for(int i=0;i<prices.size();i++)
        {
            minsofar=min(prices[i],minsofar);
            profit=prices[i]-minsofar;
            maxprofit=max(maxprofit,profit);
        }
        
        return maxprofit;
        
    }
};


6)stocks  buys and sell-2
leetcode-122
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        
        int maxprofit=0;
        
        for(int i=1;i<prices.size();i++)
        {
            if(prices[i]>prices[i-1])
            {
                maxprofit+=(prices[i]-prices[i-1]);
                
            }
        }
        return maxprofit;
        
    }
};

7)Trapping Rainwater
int trappingWater(int arr[], int n){
        // Code here
        int left[n],right[n],sum=0;
        int maxleft=arr[0];
        for(int i=0;i<n;i++)
        {
            if(arr[i]>maxleft)
            {
                maxleft=arr[i];
            }
            left[i]=maxleft;
        }
        
        int maxright=arr[n-1];
        for(int i=n-1;i>=0;i--)
        {
            if(arr[i]>maxright)
            {
                maxright=arr[i];
            }
            right[i]=maxright;
        }
        
        for(int i=0;i<n;i++)
        {
            sum+=min(left[i],right[i])-arr[i];
        }
        
        return sum;
        
    }


----------------------------------------------------------------------------------TREES--------------------------------------------------------------------------------------

1)Level order traversal
class Solution
{
    public:
    //Function to return the level order traversal of a tree.
    vector<int> levelOrder(Node* node)
    {
        vector<int> v;
        util(node,v);
        return v;
    }
    
    void util(Node * node,vector<int>v)
    {
        
        if(node==NULL)
        {
            return;
        }
        queue<Node *>q;
        q.push(node);
        while(!q.empty())
        {
            Node* temp=q.front();
            v.push_back(temp->data);
            cout<<temp->data<<" ";
            if(!temp->left==NULL )
            {
                q.push(temp->left);
                
            }
            if(!temp->right==NULL)
            {
                q.push(temp->right);
                
            }
            q.pop();
        }
        
        
        
    }
};

2)Reverse level order traversal

void util(Node * node,vector<int>v)
    {
        
        if(node==NULL)
        {
            return;
        }
        queue<Node *>q;
        q.push(node);
        while(!q.empty())
        {
            Node* temp=q.front();
            v.push_back(temp->data);
            //cout<<temp->data<<" ";
            
            if(!temp->right==NULL)
            {
                q.push(temp->right);
                
            }
            if(!temp->left==NULL )
            {
                q.push(temp->left);
                
            }
            q.pop();
        }
        
        for(int i=v.size()-1;i>=0;i--)
        {
            cout<<v[i]<<" ";
        }
        
        
        
    }
    
vector<int> reverseLevelOrder(Node* root)
{
    
    vector<int> v;
    util(root,v);
    return v;
}
        
